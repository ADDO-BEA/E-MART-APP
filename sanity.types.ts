/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  customerName?: string;
  email?: string;
  clerkUserId?: string;
  products?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    size?: "XS" | "S" | "M" | "L" | "XL" | "6" | "8" | "10" | "12" | "14" | "34" | "36" | "38" | "40" | "42" | "7" | "9" | "11" | "13" | "15" | "5" | "3" | "4" | "35" | "37" | "39" | "41" | "22" | "23" | "24" | "25" | "26" | "27" | "28";
    quantity?: number;
    price?: number;
    currency?: string;
    _key: string;
  }>;
  totalPrice?: number;
  currency?: string;
  amountDiscounted?: number;
  status?: "pending" | "paid" | "shipped" | "delivered" | "cancelled";
  stripeSessionId?: string;
  stripePaymentId?: string;
  paid?: boolean;
  orderDate?: string;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  price?: number;
  discount?: number;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  colors?: Array<{
    label?: string;
    hex?: string;
    _type: "color";
    _key: string;
  }>;
};

export type Sale = {
  _id: string;
  _type: "sale";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  badge?: string;
  discountAmount?: number;
  couponCode?: string;
  validFrom?: string;
  validUntil?: string;
  isActive?: boolean;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Order | Product | Sale | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Category | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/vision/query.ts
// Variable: SALE_QUERY
// Query: *[_type=="sale"]|order(name asc)
export type SALE_QUERYResult = Array<{
  _id: string;
  _type: "sale";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  badge?: string;
  discountAmount?: number;
  couponCode?: string;
  validFrom?: string;
  validUntil?: string;
  isActive?: boolean;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
}>;
// Variable: PRODUCTS_QUERY
// Query: *[_type=='product']| order(name asc)
export type PRODUCTS_QUERYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  price?: number;
  discount?: number;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  colors?: Array<{
    label?: string;
    hex?: string;
    _type: "color";
    _key: string;
  }>;
}>;
// Variable: CATEGORIES_QUERY
// Query: *[_type == "category"] | order(name asc)
export type CATEGORIES_QUERYResult = Array<{
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
}>;
// Variable: PRODUCT_BY_SLUG
// Query: *[_type=="product" && slug.current == $slug]{    name,    description,    price,    discount,    category[]-> { title },    image,    colors,  }|order(name asc)
export type PRODUCT_BY_SLUGResult = Array<{
  name: string | null;
  description: string | null;
  price: number | null;
  discount: number | null;
  category: Array<{
    title: string | null;
  }> | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  colors: Array<{
    label?: string;
    hex?: string;
    _type: "color";
    _key: string;
  }> | null;
}>;
// Variable: PRODUCT_BY_CATEGORY
// Query: *[_type == "product" && references(*[_type == "category" && slug.current == $slug]._id)] | order(name asc)
export type PRODUCT_BY_CATEGORYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  price?: number;
  discount?: number;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  colors?: Array<{
    label?: string;
    hex?: string;
    _type: "color";
    _key: string;
  }>;
}>;
// Variable: PRODUCT_SEARCH_QUERY
// Query: *[_type=='product' && name match $searchParams] | order(name asc)
export type PRODUCT_SEARCH_QUERYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  price?: number;
  discount?: number;
  category?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  colors?: Array<{
    label?: string;
    hex?: string;
    _type: "color";
    _key: string;
  }>;
}>;
// Variable: ORDER_QUERY
// Query: *[_type == "order" && clerkUserId == $userId]   | order(orderDate desc) {    _id,    _createdAt,    total,    status,    clerkUserId,    customer,    orderDate,    items[] {      name,      price,      quantity,      sizes,      productId    }  }
export type ORDER_QUERYResult = Array<{
  _id: string;
  _createdAt: string;
  total: null;
  status: "cancelled" | "delivered" | "paid" | "pending" | "shipped" | null;
  clerkUserId: string | null;
  customer: null;
  orderDate: string | null;
  items: null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type==\"sale\"]|order(name asc)": SALE_QUERYResult;
    "*[_type=='product']| order(name asc)": PRODUCTS_QUERYResult;
    "*[_type == \"category\"] | order(name asc)": CATEGORIES_QUERYResult;
    "\n  *[_type==\"product\" && slug.current == $slug]{\n    name,\n    description,\n    price,\n    discount,\n    category[]-> { title },\n    image,\n    colors,\n  }|order(name asc)\n": PRODUCT_BY_SLUGResult;
    "\n  *[_type == \"product\" && references(*[_type == \"category\" && slug.current == $slug]._id)] | order(name asc)": PRODUCT_BY_CATEGORYResult;
    "*[_type=='product' && name match $searchParams] | order(name asc)": PRODUCT_SEARCH_QUERYResult;
    "\n  *[_type == \"order\" && clerkUserId == $userId] \n  | order(orderDate desc) {\n    _id,\n    _createdAt,\n    total,\n    status,\n    clerkUserId,\n    customer,\n    orderDate,\n    items[] {\n      name,\n      price,\n      quantity,\n      sizes,\n      productId\n    }\n  }\n": ORDER_QUERYResult;
  }
}
